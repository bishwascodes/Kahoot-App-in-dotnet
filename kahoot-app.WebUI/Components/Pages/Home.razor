@page "/"
@inject NavigationManager navManager
@inject ILogger<Home> logger
@*
<Login /> *@

<PageTitle>Kahoot</PageTitle>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link
    href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
    rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css"
    integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
<style>
    :root {
        --accent-color: #EB5E28;
        --background-color-1: #CCC5B9;
    }

    body {
        font-family: "Poppins", sans-serif;
    }

    .hero-left h3 {
        font-size: 3.1rem;
        font-weight: bold;
    }

    .hero-left h4 {
        font-weight: bold;
    }

    .hero-left h3 span,
    .hero-left h4 span {
        color: var(--accent-color);
    }

    .shadow-1 {
        box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;
    }

    .quiz-lists .item {
        background: var(--background-color-1);
    }

    .btn-primary {
        background: #EB5E28;
        border-radius: 20px;
        border: none;
        padding-left: 1.5rem;
        padding-right: 1.5rem;
        outline: none;
    }

    .btn-secondary,
    .btn-success {
        border-radius: 20px;
        padding-left: 1.5rem;
        padding-right: 1.5rem;
    }
</style>


<div class="row align-items-center">
    <div class="col-md-7 hero-left">
        <h3>Wanna Have <span>Fun?</span></h3>
        <p>Play the most interesting quiz game in the word for free.</p>
        <div class="recent-quiz-list mt-5">
            <div class="row">
                <div class="col-6">
                    <h4>Active <span>Quizzes</span> 🐥</h4>
                    
                    <p class="mt-3">[@openQuizzes.Count Quizzes Available]</p>
                </div>
                <div class="col-6">
                    <div class="d-flex justify-content-between">
                        <button class="btn btn-primary"  @onclick="() => showCreateQuizForm = true">Create New Quiz</button>
                        <button class="btn btn-success">Join As Admin</button>
                    </div>

                </div>
            </div>
            @if(showCreateQuizForm){
            <h1>Create New Quiz</h1>
            <form @onsubmit="CreateQuiz">
                <div class="form-group">
                    <label for="adminName">Admin Name:</label>
                    <input type="text" class="form-control" id="adminName" required @bind="adminName">
                </div>
                <div class="form-group">
                    <label for="quizName">Quiz Name:</label>
                    <input type="text" class="form-control" id="quizName" required @bind="quizName">
                </div>
                <button type="submit" class="btn btn-primary m-3">Launch the Quiz</button>
            </form>
            }
            <div class="quiz-lists mt-3">
    @if (openQuizzes.Any())
        {
            @foreach (var item in openQuizzes)
            { 
                <div class="item mb-4 px-3 rounded py-2 boxed shadow-1">
                    <div class="row align-items-center">
                        <div class="col-9">
                            <p class="mb-0">Quiz ID: @item.Id</p>
                            <h4>@item.Quiz.QuizName</h4>
                            <div class="d-flex">
                                <p class="me-4"><i class="fa-solid fa-user-tie"></i> By @item.Quiz.Admin.AdminName</p>
                                <p><i class="fa-solid fa-users"></i> Players Joined: @item.Quiz.Players.Count</p>
                            </div>
                        </div>
                        <div class="col-3">
                            <button @onclick=@(() => joinQuiz(item.Id))  class="btn btn-secondary">Join Now</button>
                        </div>
                    </div>
                </div>
            }
        }
            </div>
        </div>
    </div>
    <div class="col-md-5">
        <img src="hero_img.svg" alt="Bishwas Quiz Hero Image">
    </div>

</div>


@code {

    List<(int Id, Quiz Quiz)> openQuizzes;
    bool showCreateQuizForm = false;
    string adminName;
    string quizName;

    void joinQuiz(int QuizId)
    {
        logger.LogInformation("Joining Quiz {id}", QuizId);
        navManager.NavigateTo($"/join?Quizid={QuizId}");
    }

    async Task CreateQuiz()
    {
        var newQuiz = new Quiz(quizName);
        newQuiz.Admin = new Admin(adminName);
        QuizHost.Instance.Quizzes.Add(newQuiz);
        newQuiz.PlayersCanJoin = true;
        QuizHost.Instance.RaiseHostStateChanged();
        navManager.NavigateTo($"/quiz-dashboard?Quizid={QuizHost.Instance.Quizzes.Count}");

    }

    void refresh()
    {
        openQuizzes = (from Quiz in QuizHost.Instance.Quizzes
                       let index = QuizHost.Instance.Quizzes.IndexOf(Quiz)
                       where Quiz.PlayersCanJoin is true
                       select (index + 1, Quiz)).ToList();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        refresh();
        StateHasChanged();
        QuizHost.Instance.HostStateChanged += () => InvokeAsync(refresh);
    }
}
