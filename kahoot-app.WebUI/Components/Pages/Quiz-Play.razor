@page "/quiz-play"

@inject NavigationManager NavigationManager
@inject ILogger<Quiz_Play> logger
@using kahoot_app.WebUI.Components.Layout

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link
    href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
    rel="stylesheet">
<style>
    body {
        font-family: "Poppins", sans-serif;
    }

    .quiz-answer-box {
        border: 0.5px solid #000;
    }

    .bg-correct {
        background: blue;
        color: #fff;
    }

    .bg-wrong {
        background: blue;
        color: #fff;
    }
</style>
@if (me is null)
{
    <div class="bg-danger">There is no player with your Name!</div>
}
else if (!IsQuizOver)
{
    if (!isQuizStarted)
    {

        @* REQ#1.7.3 *@
        <h1> You're in the Lobby of the quiz "@quiz.QuizName"</h1>
        <h3> @me.Name, are you excited? The quiz will start shortly once the admin starts.</h3>

        <div class="row">
            <div class="col-12 mt-5">
                @* REQ#3.1.3 *@
                @if (others.Any())
                {
                    <h5>Here is the list of other participants: </h5>
                    <ol>
                        @foreach (var individual in others)
                        {
                            <li>@individual.Name</li>
                        }
                    </ol>

                }
            </div>
        </div>
    }
    @* REQ#1.4.3 User can't start the game until the admin presses the start quiz *@
    else
    {
        <div class="p-5">
            <div class="p-4">
                <h3 class="text-center mb-4">Hello @me.Name! Enjoy the game.</h3>
                <em>P.S: This is an Admin Paced quiz. Admin will have to change the question for everyone.</em>
            </div>
            <div class="row">
                <div class="col-8">
                    <div class="shadow-1 p-5 border-rounded boxed">
                        <p class="p-3">Question Number: @currentQuestionNum/@quiz.Questions.QuestionsList.Count</p>
                        <h4 class="text-center"> @quizQuestions?.GetQuestion(currentQuestionNum - 1) </h4>
                        <div class="row">
                            @foreach (var item in quizQuestions.GetOptions(currentQuestionNum - 1))
                            {
                                <div class="col-6">
                                    <div class="inner">
                                        <div class="boxed rounded shadow-1 quiz-answer-box p-4 mt-4"
                                            @onclick="@(() => CheckAnswer(item.Item1))">@item.Item2</div>
                                    </div>
                                </div>
                            }
                        </div>
                        <h4 class="text-center p-3"> @answerResult </h4>
                        <h5 class="text-center mt-5">Your Current Score: @me.Score.Value</h5>
                    </div>
                </div>
                <div class="col-4">
                    <LeaderboardData LeaderboardPlayers="@playerRanks" />
                </div>
            </div>
        </div>
    }

}
else
{
    <div class="text-center p-5">
        <h3>Quiz Over!!</h3>

        <img class="img-fluid" width="200" src="trophy.jpg" alt="" srcset="">
        @* REQ#1.3.3 *@
        <h5>Well Done @me.Name</h5>
        <h1> Your Rank is @myRank out of @playerList.Count </h1>
        <LeaderboardData LeaderboardPlayers="@playerRanks" />
        <a class="btn btn-primary" href="/">Go To Home</a>
    </div>
}


@code {

    Quiz? quiz
    {
        get
        {
            if (QuizId is null)
                return null;

            try
            {
                return QuizHost.Instance.Quizzes[QuizId.Value - 1];
            }
            catch
            {
                NavigationManager.NavigateTo("/");
            }
            return null;
        }
    }
    Player? me;

    List<(int, string, int)> playerRanks = new();

    bool isQuizStarted;
    int currentQuestionNum = 1;

    bool answerAlreadyChecked = false;

    string answerResult = "";
    bool IsQuizOver = false;

    int myRank;
    Questions? quizQuestions;

    List<Player?> playerList;
    List<Player?> others;
    List<string> errors = new();

    [SupplyParameterFromQuery]
    public int? QuizId { get; set; }

    [SupplyParameterFromQuery]
    public int PlayerId { get; set; }

    @* REQ#1.5.3 *@
    void CheckAnswer(int value)
    {
        if (!answerAlreadyChecked)
        {
            bool isCorrect = quizQuestions.GetCorrectAnswer(currentQuestionNum - 1) == value;
            if (isCorrect)
            {
                me.Score.ChangeScore(150);
                answerResult = "Result : Correct Answer! ";
            }
            else
            {
                answerResult = "Result : Wrong Answer! ";
            }
            answerAlreadyChecked = true;
        }
    }
    protected override void OnParametersSet()
    {
        @* REQ#3.1.2 *@
        quiz.QuizStateChanged += () =>
        {
            quizQuestions = quiz.Questions;
            currentQuestionNum = quiz.CurrentQuestionNumber;
            InvokeAsync(() =>
    {
    @* REQ#3.1.3 *@
    others = quiz.Players.Where(player => player?.PlayerId != PlayerId).ToList();
    StateHasChanged();
});
        };
        quiz.QuizStarted += () =>
        {
            InvokeAsync(() =>
    {
    @* REQ#3.1.3 *@
    quizQuestions = quiz.Questions;
    isQuizStarted = true;
    StateHasChanged();
});
        };

        quiz.QuestionChangedEvent += () =>
        {
            InvokeAsync(() =>
    {
        answerResult = " ";
    answerAlreadyChecked = false;
    currentQuestionNum++;
    playerRanks = quiz.GetPlayerRanks();
    StateHasChanged();
            });

        };

        quiz.QuizReset += () =>
        {
            InvokeAsync(() =>
    {

    IsQuizOver = true;
    var rankList = quiz.GetPlayerRanks();
    //REQ#4.1.1
    Leaderboard.UpdateLeaderboard(rankList);
    Leaderboard.SaveLeaderboard();
    myRank = rankList.FirstOrDefault(rank => rank.playerName == me.Name).rank;
    //REQ#3.1.3
    StateHasChanged();

            });
        };

        playerList = quiz.Players;

        me = quiz.Players.FirstOrDefault(player => player?.PlayerId == PlayerId);

        others = quiz.Players.Where(player => player?.PlayerId != PlayerId).ToList();

        errors.Clear();
    }
    protected override void OnInitialized()
    {

    }


}

<style>
    .quiz-answer-box {
        transition: all 0.7s ease-in-out;
    }

    .quiz-answer-box:hover {
        background-color: blue;
        color: #fff;
        cursor: pointer;
    }
</style>