@page "/quiz-dashboard"
@using kahoot_app.WebUI.Components.Layout

@inject NavigationManager NavigationManager

<PageTitle>Quiz Dashboard</PageTitle>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link
    href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
    rel="stylesheet">
<style>
    body{
        font-family: "Poppins", sans-serif;
    }
</style>
@if(!IsQuizOver){
<div>
    <div class="row">

    
        <h1>Welcome to Quiz Management Dashboard</h1>
        <div class="col-8">
            <div class="mt-5 p-2 mb-6">
                <h3>Hello @quiz.Admin.Name ! Your're Managing the quiz.</h3>
                <h4>Your Quiz is : <em> @quiz.QuizName </em></h4>
            </div>

            <div class="row mt-4 p-2">
            @* REQ#3.1.3 *@
            <h5> Current Participants: <em>(@playerList.Count)</em></h5>
            @foreach (var player in playerList)
            {
                <div class="col-3 text-center">
                    <div class="card p-4"> @player.Name </div>
                </div>
            } 
            </div>
            @if(!quizStartedDashboard){
                <div class="d-flex justify-content-end">
                    <div style="margin-right: 100px;">
                        <button class="btn btn-primary mt-4" disabled="@(!CanStartQuiz)" @onclick="StartQuiz">Start Quiz Now</button>
                    </div>
                
                </div>
            } else{
                
                <div class="shadow p-5 border-rounded boxed">
                    <h5 class="text-center mb-2">Current Question @currentQuestionNum/@quizQuestionList.Count</h5>
                    <h4 class="text-center"> @quizQuestions.GetQuestion(currentQuestionNum-1) </h4>
                    <div class="row">
                        @foreach(var item in quizQuestions.GetOptions(currentQuestionNum-1)){
                        <div class="col-6">
                            <div class="inner card">
                                No. @currentQuestionNum 
                                @item.Item2
                            </div>
                        </div>
                          }
                    </div>
                </div>
              
                 <button class="btn btn-primary mt-4 ml-auto" @onclick="ChangeQuizQuestion">Next Question</button>
                
            }
        </div>
    
        <div class="col-4">
            @if(quizStartedDashboard){
            <LeaderboardData LeaderboardPlayers="@leaderboardPlayersList" />
            }
        </div>

    </div>

</div>
} else{
    <div>
        <div class="text-center p-5">
            <h3>Quiz Is Over!!</h3>
            <img class="img-fluid" width="200" src="trophy.jpg" alt="" srcset="">
            @* REQ#1.3.3 *@
            <h5>Well Done Admin! Your Players Played well.</h5>
            <br>
            <LeaderboardData LeaderboardPlayers="@rankList" />
            <a class="btn btn-primary" href="/">Go To Home</a>
        </div>

    </div>
}
@code {

    [SupplyParameterFromQuery]
    public int? QuizId { get; set; }
    bool adminAdded = false;
    int answer;
    bool quizStartedDashboard;

    bool CanStartQuiz;

    bool IsQuizOver = false;
    List<(int, string, int)> rankList;

    string adminName;
    Questions? quizQuestions;

    int currentQuestionNum =0;

    void ChangeQuizQuestion(){
        quiz.ChangeQuestion();
    }

    List<(int, string, int)> leaderboardPlayersList = new();

    List<(string, List<(int, bool, string)>)> quizQuestionList = new();
    List<Player> playerList = new();

    

    Quiz? quiz
    {
        get
        {
            if (QuizId is null)
                return null;

            try
            {
                return QuizHost.Instance.Quizzes[QuizId.Value - 1];
            }
            catch
            {
                NavigationManager.NavigateTo("/");
            }
            return null;
        }

    }

    void StartQuiz(){

        quiz.Start();
        

    }
    protected override void OnInitialized()
    {
        @* REQ#4.1.2 *@
        leaderboardPlayersList = Leaderboard.LeaderboardPlayers;
        quiz.getQuestions();
        quizQuestions = quiz.Questions;
        quizQuestionList = quizQuestions.QuestionsList;
        currentQuestionNum = quiz.CurrentQuestionNumber;
        quiz.QuizStateChanged += () => InvokeAsync(StateHasChanged);

    }
    protected override void OnParametersSet()
    {
        quiz.QuizStateChanged += () =>
        {
            InvokeAsync(() =>
            {
                @* REQ#3.1.3 *@
                playerList = quiz.Players;
                currentQuestionNum = quiz.CurrentQuestionNumber;
                leaderboardPlayersList = Leaderboard.LeaderboardPlayers;
                CanStartQuiz = playerList.Count > 0;
                StateHasChanged();
            });
        };
        quiz.QuizStarted += () =>
        {
            InvokeAsync(() =>
            {
                @* REQ#3.1.3 *@
                currentQuestionNum = quiz.CurrentQuestionNumber;
                quizStartedDashboard = true;
                StateHasChanged();
            });
        };
         quiz.QuestionChangedEvent += () => {
            InvokeAsync(() =>
            {
                currentQuestionNum = quiz.CurrentQuestionNumber;
                StateHasChanged();
            });
           
        };
         quiz.QuizReset += () =>
        {
            InvokeAsync(() =>
            {
            IsQuizOver = true;
            rankList = quiz.GetPlayerRanks();
            //REQ#3.1.3
            StateHasChanged();

                    });
        };


    }

}
